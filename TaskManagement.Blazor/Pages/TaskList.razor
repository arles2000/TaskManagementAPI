@page "/tasks/{userId:int}"
@using TaskManagement.Domain.Entities 
@inject ITaskService TaskService

<h3>Tareas del Usuario @userId</h3>



<button class="btn btn-primary" @onclick="ToggleForm">
    @(showForm ? "Hide Form" : "Show Form")
</button>

@if (showForm)
{
    <div class="mt-3">
        <EditForm Model="@newTask" OnValidSubmit="AddTask">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="titulo">Titulo:</label>
                <input type="text" @bind="newTask.Titulo" class="form-control" id="titulo" />
                <ValidationMessage For="@(() => newTask.Titulo)" />
            </div>

            <div class="form-group">
                <label for="descripcion">Descripción:</label>
                <textarea @bind="newTask.Descripcion" class="form-control" id="descripcion"></textarea>
                <ValidationMessage For="@(() => newTask.Descripcion)" />
            </div>

            <div class="form-group">
                <label for="fechaVencimiento">Fecha Vencimiento:</label>
                <input type="date" @bind="newTask.FechaVencimiento" class="form-control" id="fechaVencimiento" />
                <ValidationMessage For="@(() => newTask.FechaVencimiento)" />
            </div>

            <div class="form-group">
                <label for="finalizado">Finalizado:</label>
                <input type="checkbox" @bind="newTask.Finalizado" class="form-check-input" id="finalizado" />
            </div>

            <div class="form-group">
                <label for="eliminado">Eliminado:</label>
                <input type="checkbox" @bind="newTask.Eliminado" class="form-check-input" id="eliminado" />
            </div>

            <div class="form-group">
                <label for="tags">Tags:</label>
                <input type="text" @bind="newTask.Tags" class="form-control" id="tags" />
                <ValidationMessage For="@(() => newTask.Tags)" />
            </div>

            <div class="form-group">
                <label for="idPrioridad">Prioridad:</label>
                <select @bind="newTask.IdPrioridad" class="form-control" id="idPrioridad">
                    @foreach (var prioridad in prioridades)
                    {
                        <option value="@prioridad.Key">@prioridad.Value</option>
                    }
                </select>
                <ValidationMessage For="@(() => newTask.IdPrioridad)" />
            </div>

            <button type="submit" class="btn btn-success mt-3">Add Task</button>
        </EditForm>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Titulo</th>
            <th>Descripción</th>
            <th>Fecha Vencimiento</th>
            <th>Finalizado</th>
            <th>Eliminado</th>
            <th>Tags</th>
            <th>Id Prioridad</th>
            <th>Opciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var registro in tareas)
        {
            <tr>
                <td>@registro.Id</td>
                <td>@registro.Titulo</td>
                <td>@registro.Descripcion</td>
                <td>@registro.FechaVencimiento.ToShortDateString()</td>
                <td>@(registro.Finalizado ? "Yes" : "No")</td>
                <td>@(registro.Eliminado ? "Yes" : "No")</td>
                <td>@registro.Tags</td>
                <td>@registro.IdPrioridad</td>
                <td> <button class="btn btn-danger" @onclick="() => EliminarTarea(registro.Id)">Eliminar</button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int userId { get; set; } // Parámetro para recibir el ID de usuario

    private TaskManagement.Domain.Entities.Tarea newTask = new TaskManagement.Domain.Entities.Tarea();

    private List<TaskManagement.Domain.Entities.Tarea> tareas = new List<TaskManagement.Domain.Entities.Tarea>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tareas = await TaskService.GetTasksByUserIdAsync(userId);
            if (tareas == null)
            {
                tareas = new List<TaskManagement.Domain.Entities.Tarea>();

            }
            tareas = tareas.Where(task => task.IdUsuario == userId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching tasks: {ex.Message}");
            tareas = new List<TaskManagement.Domain.Entities.Tarea>(); // Inicializa con lista vacía en caso de error
        }
    }

    private async Task EliminarTarea(int tareaId)
    {
        await TaskService.DeleteTaskAsync(tareaId);
         tareas = await TaskService.GetTasksByUserIdAsync(userId);
        if (tareas == null)
        {
            tareas = new List<TaskManagement.Domain.Entities.Tarea>();
        }
        tareas = tareas.Where(task => task.IdUsuario == userId).ToList();
    }

    private bool showForm = false;

    private void ToggleForm()
    {
        showForm = !showForm;
    }

    private async Task AddTask()
    {
        newTask.IdUsuario = userId;

        await TaskService.CreateTaskAsync(newTask);//.CreateUserAsync(newUser);
       
        tareas = await TaskService.GetTasksByUserIdAsync(userId);
        if (tareas == null)
        {
            tareas = new List<TaskManagement.Domain.Entities.Tarea>();

        }
        tareas = tareas.Where(task => task.IdUsuario == userId).ToList();
        newTask = new TaskManagement.Domain.Entities.Tarea(); 

        showForm = false;
    }

    private Dictionary<int, string> prioridades = new Dictionary<int, string>
    {
        { 1, "Alto" },
        { 2, "Medio" },
        { 3, "Bajo" }
    };
}
