@page "/"
@inject IUserService UserService
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>
<h1>Listado de Usuarios</h1>

<button class="btn btn-primary" @onclick="ToggleForm">
    @(showForm ? "Hide Form" : "Show Form")
</button>

@if (showForm)
{
    <div class="mt-3">
        <EditForm Model="@newUser" OnValidSubmit="AddUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="nombre">Nombre:</label>
                <input type="text" @bind="newUser.Nombre" class="form-control" id="nombre" />
                <ValidationMessage For="@(() => newUser.Nombre)" />
            </div>
            <div class="form-group">
                <label for="apellido">Apellido:</label>
                <input type="text" @bind="newUser.Apellido" class="form-control" id="apellido" />
                <ValidationMessage For="@(() => newUser.Apellido)" />
            </div>
            <div class="form-group">
                <label for="correo">Correo:</label>
                <input type="email" @bind="newUser.Correo" class="form-control" id="correo" />
                <ValidationMessage For="@(() => newUser.Correo)" />
            </div>
            <div class="form-group">
                <label for="telefono">Teléfono:</label>
                <input type="tel" @bind="newUser.Telefono" class="form-control" id="telefono" />
                <ValidationMessage For="@(() => newUser.Telefono)" />
            </div>

            <button type="submit" class="btn btn-success mt-3">Add User</button>
        </EditForm>
    </div>
}



@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Correo</th>
                <th>Teléfono</th>
                <th>Created_At</th>
                <th>Updated_At</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Nombre</td>
                    <td>@user.Apellido</td>
                    <td>@user.Correo</td>
                    <td>@user.Telefono</td>
                    <td>@user.Created_At</td>
                    <td>@user.Updated_At</td>
                    <td>
                        <button @onclick="() => DeleteUser(user.Id)" class="btn btn-danger">Delete</button>
                    </td>
                     <td>
                    <button @onclick="() => NavigateToTasks(user.Id)" class="btn btn-primary">Manage Tasks</button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
@code {
    private Usuario newUser = new Usuario();

    private List<Usuario> users = new List<Usuario>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        users = await UserService.GetAllUsersAsync();
    }

    private async Task CreateUser()
    {
        await UserService.CreateUserAsync(newUser);
        users = await UserService.GetAllUsersAsync();
        newUser = new Usuario(); // Limpiar el formulario después de la creación
    }

    private async Task DeleteUser(int userId)
    {
        await UserService.DeleteUserAsync(userId);
        users = await UserService.GetAllUsersAsync();
    }

    private void NavigateToTasks(int userId)
    {
        NavigationManager.NavigateTo($"/tasks/{userId}");
    }


    private bool showForm = false;
 


    private void ToggleForm()
    {
        showForm = !showForm;
    }

    private async Task AddUser()
    {
        await UserService.CreateUserAsync(newUser);
        users = await UserService.GetAllUsersAsync();
        newUser = new Usuario(); // Limpiar el formulario después de la creación

        showForm = false;
    }
}